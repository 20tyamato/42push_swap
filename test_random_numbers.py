import itertools
import subprocess

def run_push_swap_and_checker(length):
    sequence = list(range(1, length + 1))
    permutations = list(itertools.permutations(sequence))
    formatted_permutations = [" ".join(map(str, perm)) for perm in permutations]
    max_steps = 0
    min_steps = float("inf")
    error_count = 0

    for perm in formatted_permutations:
        subprocess.run(
            "make",
            shell=True,
            capture_output=True,
            text=True
        )
        push_swap_result = subprocess.run(
            f"./push_swap {perm}",
            shell=True,
            capture_output=True,
            text=True
        )
        checker_result = subprocess.run(
            f"./checker {perm}",
            shell=True,
            input=push_swap_result.stdout,
            capture_output=True,
            text=True
        )
        if push_swap_result.stdout.strip() == "":
            steps = 0
        else:
            steps = len(push_swap_result.stdout.strip().split("\n"))
        if steps > max_steps:
            max_steps = steps
        if steps < min_steps:
            min_steps = steps
        if checker_result.stdout.strip() != "OK":
            error_count += 1
        print(f"{perm}: {checker_result.stdout.strip()} with {steps} steps")

    print(f"Total permutations: {len(formatted_permutations)}")
    print(f"Max steps: {max_steps}")
    print(f"Min steps: {min_steps}")
    print(f"Errors: {error_count}")

def run_simple_push_swap_and_checker():
    formatted_permutations = ["5 2 7 1 6 3 9 4 8"]
    max_steps = 0
    min_steps = float("inf")
    error_count = 0

    for perm in formatted_permutations:
        subprocess.run(
            "make",
            shell=True,
            capture_output=True,
            text=True
        )
        push_swap_result = subprocess.run(
            f"./push_swap {perm}",
            shell=True,
            capture_output=True,
            text=True
        )
        checker_result = subprocess.run(
            f"./checker {perm}",
            shell=True,
            input=push_swap_result.stdout,
            capture_output=True,
            text=True
        )
        if push_swap_result.stdout.strip() == "":
            steps = 0
        else:
            steps = len(push_swap_result.stdout.strip().split("\n"))
        if steps > max_steps:
            max_steps = steps
        if steps < min_steps:
            min_steps = steps
        if checker_result.stdout.strip() != "OK":
            error_count += 1
        print(f"{perm}: {checker_result.stdout.strip()} with {steps} steps")

    print(f"Output:\n{push_swap_result.stdout}")

def run_long_push_swap_and_checker():
    formatted_permutations = ["-1319684046 923045557 -1120712764 1363586067 -1873583420 -1789911153 -1220500496 220029399 -1997675387 -267865191 1047119380 773401715 -1748769697 -359521044 -1021486829 1485540569 1554265200 -37146648 691971643 -1022162226 -1231454483 -726665366 -145526442 330708584 126365560 -944242760 1979552114 -374253861 -1827073210 -938699971 -959587602 166567018 -1200669531 -1212409514 1560226019 -813941524 -352720759 1462268341 -1587578062 -1471890760 -695612629 -374578620 1158074749 356427210 -1886119479 -1902579300 -1864700928 -1701450133 238213386 1904435389 230645176 -970790774 468481602 -790603838 -718613074 -931146754 -2106854224 775455146 -314999098 1622155048 -1740889607 -963611954 267406313 694884021 -2056642870 -539843817 -1809492420 -2047799017 -351503231 -1583546849 1868928409 1580202049 1128795805 131300895 1546951166 -725893375 806170660 -1852722176 -400588906 -1501949500 1823484256 -1181222942 1749915168 -917113318 -174180108 -1998222363 2128723613 15267299 -692608957 507902547 -562086040 246920175 628135104 -1357128323 1050181956 -790485945 1010123967 1019636281 747226998 1438436060 -1676147374 -1137420588 196892526 -1838286179 -1578003887 269842214 985102298 -1837476749 -415449223 338183123 2103722901 -204645838 -1680464728 872364525 1261068842 -499140916 219985587 2116058888 -1986057150 183554285 415221240 585617501 202938314 389305742 731470550 -1361353690 830348964 1913639005 -1937502355 -1254872462 1618570016 -1406490288 2030915966 1578249875 1468676573 255104680 -1340245442 1479790183 129067672 -732243345 448910554 1371718260 995434504 -1171653614 1653931821 1335451551 -428308283 1371528390 -434258271 -978137348 1350923941 1752097483 -956159451 -681098321 1619026503 -1546377555 1779288828 -2117446666 -1495954210 1729182080 -353768194 -267037763 -1320202403 1761185971 -424175916 -354513062 1335677618 769315848 285487899 -1745931954 -1844175672 98296542 -481722417 1357289444 -1572427279 -821967524 1397731741 -1037986521 1664693282 1994332109 -759332342 -1981501947 468296153 1939962339 335715466 -2108692057 916153401 -1787322059 -1451504168 1705739538 1102064581 -1299016084 662056483 1600017215 -1770767525 1628830247 2000446328 1427744869 514431316 485578704 1463107959 -317298015 503590946 -524447151 1289054326 -2011445326 436059976 -369055344 1093046868 -161120454 -1593021019 -981106148 -617396670 -1063206599 1089429646 1533483993 -2010501693 1439871816 153111071 866596450 373660225 54660474 -2125016414 192743601 -1587379317 1088573242 -183691138 -441063860 -2108427644 -345579578 -2051955034 971396868 -500205208 -463813235 1856687286 2119800405 1481531356 -1423662753 -349226336 1258958274 -218100097 -283311780 -360753228 919111560 494740079 1612120364 403387138 592068013 -992095538 -1662595146 1963414053 1547287199 -1584603244 -1197994216 1134865067 -121870421 681548505 1595531965 -1054814424 1583141569 904165140 720760554 1040793286 1339531412 -1279714572 1131826386 333307682 863333719 -675372643 477762003 -125769646 -1988003607 66906800 -1909149630 -225200226 -562372890 140571790 -377495565 -1533715342 1570871872 875394111 1892398390 -665456523 -1458196142 -203297117 -469010770 -1237367402 -1120753993 827097727 -1653486557 1941235893 365965476 1224911303 1138112532 1365462048 -1723972826 -1436269429 -1542532711 1275961113 -1316657631 649343169 -639925074 -627882777 -1759850856 1243823754 690909852 -1326534104 624071388 -1879651097 1696177020 786384578 -308334691 1950744080 589387152 1225401163 1002290040 1837121163 18047235 44382564 77221913 -2143266467 -290478644 -839177933 829893746 -2093711579 -1107647244 1347721344 -678801798 -1948631801 2073173291 -2117178989 1422816649 299894417 -1617810485 -1793490728 814137665 -1379324047 984583297 -1406883856 -1424869148 575815417 1097476147 -1384627716 206224580 -1340024227 243459539 1643758682 1330877414 -1351820610 -621222769 -2080766128 952581860 21002820 1369190088 1652328685 150450883 529148304 205577251 -1369912732 1673635987 1137509554 -1216418483 -1401526062 -328194145 -226564643 -996628215 1399917011 1340301855 -1806396756 -490956953 2091709726 183457914 -2019024531 -1742549557 -970483378 -1127186198 -1272050344 -1487553891 1385125179 1136904546 1536548803 -1791605684 1195487600 -741993907 2100230093 -1957102178 -1384493065 -1892823740 316170283 1503437576 1438013086 -681489623 -1357605528 1445476188 -941683087 -777170102 148260361 -1585635183 2107950253 -1543475081 -987827253 246120148 -995239889 1154299227 -1335320110 1927462020 -125300053 -581958003 -1320223568 444864311 757964516 151510021 -644413912 -533145383 1171255378 409592337 -794030398 -2081064913 805240051 1133653875 -723240075 -1516289288 348615425 -565299658 1494089970 -414078307 -791644347 -1637443907 1491824585 -250261918 1855200205 815865353 -1577984314 1470480771 1265090279 -785382192 357588642 1280470217 2077671892 1261517513 1240399546 -228613314 -1391622959 949826107 1698022667 1775947387 -1673848330 -1323168579 342720955 877971304 1539986897 -615907919 -1353281358 -136385947 1188064430 60918691 917133729 1932171443 -537461789 1671511564 -404190372 -2002779113 -1693361852 1090590416 1758326150 -1125072886 -1990066283 -1799216353 -932765037 1105598734 1377228331 -325116734 -2026953037 174653637 -223439656 1538260009 944079796 -2043161448 -1783486294 -1755507727 336673727 1101130067 -1744835076 -849339695 -1512859260 497008275 342625631 -1736355583 823756481 -395179119 -82424210 -8743361 -266684419 -1810790373 -411851868 939997417 1208335397 1336351511 -2019305043 932914037"]
    max_steps = 0
    min_steps = float("inf")
    error_count = 0

    for perm in formatted_permutations:
        subprocess.run(
            "make",
            shell=True,
            capture_output=True,
            text=True
        )
        push_swap_result = subprocess.run(
            f"./push_swap {perm}",
            shell=True,
            capture_output=True,
            text=True
        )
        checker_result = subprocess.run(
            f"./checker {perm}",
            shell=True,
            input=push_swap_result.stdout,
            capture_output=True,
            text=True
        )
        if push_swap_result.stdout.strip() == "":
            steps = 0
        else:
            steps = len(push_swap_result.stdout.strip().split("\n"))
        if steps > max_steps:
            max_steps = steps
        if steps < min_steps:
            min_steps = steps
        if checker_result.stdout.strip() != "OK":
            error_count += 1
        print(f"{perm}: {checker_result.stdout.strip()} with {steps} steps")

    print(f"Output:\n{push_swap_result.stdout}")
    print(f"Total permutations: {len(formatted_permutations)}")
    print(f"Max steps: {max_steps}")
    print(f"Min steps: {min_steps}")
    print(f"Errors: {error_count}")

if __name__ == "__main__":
    # python test_random_numbers.py 5 | grep "KO"
    # python test_random_numbers.py 0
    # leaks -quiet -atExit -- ./push_swap "9 1 2 3 4 5 6 7 8"
    import argparse

    parser = argparse.ArgumentParser(description="Test push_swap and checker with permutations.")
    parser.add_argument("length", type=int, choices=[0, 1, 2, 3, 4, 5, 100], help="The length of the sequence (1 to 5, 100).")
    args = parser.parse_args()

    if args.length == 0:
        run_simple_push_swap_and_checker()
        exit()
    if args.length == 100:
        run_long_push_swap_and_checker()
        exit()
    run_push_swap_and_checker(args.length)
